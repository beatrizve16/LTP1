from abc import ABC, abstractmethod

#classe abstrata

class FormaGeometrica(ABC):
    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass


#subclasse concreta
class Retangulo(FormaGeometrica):
    def __init__(self, largura, altura):
        self.largura = largura
        self.altura = altura

    def area(self):
        return self.largura * self.altura

    def perimeter(self):
        return 2 * (self.largura * self.altura)


#subclasse concreta
class Circulo(FormaGeometrica):
    def __init__(self, raio):
        self.raio = raio
    def area(self):
        return 3.14159 * self.raio * self.raio
    def perimeter(self):
        return 2 * 3.14159 * self.raio

#tentando instanciar a classe abstrata resultara em erro
try:
    forma=FormaGeometrica()
except Exception as e:
    print(e)


retangulo=Retangulo(5,5)
print(retangulo.area())
print(retangulo.perimeter())

circulo=Circulo(5)
print(circulo.area())
print(circulo.perimeter())
